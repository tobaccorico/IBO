// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_multisig_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Add a transaction to the batch.
type BatchAddTransaction struct {
	Args *BatchAddTransactionArgs

	// [0] = [] multisig
	// ··········· Multisig account this batch belongs to.
	//
	// [1] = [] proposal
	// ··········· The proposal account associated with the batch.
	//
	// [2] = [WRITE] batch
	//
	// [3] = [WRITE] transaction
	// ··········· `VaultBatchTransaction` account to initialize and add to the `batch`.
	//
	// [4] = [SIGNER] member
	// ··········· Member of the multisig.
	//
	// [5] = [WRITE, SIGNER] rentPayer
	// ··········· The payer for the batch transaction account rent.
	//
	// [6] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewBatchAddTransactionInstructionBuilder creates a new `BatchAddTransaction` instruction builder.
func NewBatchAddTransactionInstructionBuilder() *BatchAddTransaction {
	nd := &BatchAddTransaction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *BatchAddTransaction) SetArgs(args BatchAddTransactionArgs) *BatchAddTransaction {
	inst.Args = &args
	return inst
}

// SetMultisigAccount sets the "multisig" account.
// Multisig account this batch belongs to.
func (inst *BatchAddTransaction) SetMultisigAccount(multisig ag_solanago.PublicKey) *BatchAddTransaction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisig)
	return inst
}

// GetMultisigAccount gets the "multisig" account.
// Multisig account this batch belongs to.
func (inst *BatchAddTransaction) GetMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProposalAccount sets the "proposal" account.
// The proposal account associated with the batch.
func (inst *BatchAddTransaction) SetProposalAccount(proposal ag_solanago.PublicKey) *BatchAddTransaction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(proposal)
	return inst
}

// GetProposalAccount gets the "proposal" account.
// The proposal account associated with the batch.
func (inst *BatchAddTransaction) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBatchAccount sets the "batch" account.
func (inst *BatchAddTransaction) SetBatchAccount(batch ag_solanago.PublicKey) *BatchAddTransaction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(batch).WRITE()
	return inst
}

// GetBatchAccount gets the "batch" account.
func (inst *BatchAddTransaction) GetBatchAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTransactionAccount sets the "transaction" account.
// `VaultBatchTransaction` account to initialize and add to the `batch`.
func (inst *BatchAddTransaction) SetTransactionAccount(transaction ag_solanago.PublicKey) *BatchAddTransaction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(transaction).WRITE()
	return inst
}

// GetTransactionAccount gets the "transaction" account.
// `VaultBatchTransaction` account to initialize and add to the `batch`.
func (inst *BatchAddTransaction) GetTransactionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMemberAccount sets the "member" account.
// Member of the multisig.
func (inst *BatchAddTransaction) SetMemberAccount(member ag_solanago.PublicKey) *BatchAddTransaction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(member).SIGNER()
	return inst
}

// GetMemberAccount gets the "member" account.
// Member of the multisig.
func (inst *BatchAddTransaction) GetMemberAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRentPayerAccount sets the "rentPayer" account.
// The payer for the batch transaction account rent.
func (inst *BatchAddTransaction) SetRentPayerAccount(rentPayer ag_solanago.PublicKey) *BatchAddTransaction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(rentPayer).WRITE().SIGNER()
	return inst
}

// GetRentPayerAccount gets the "rentPayer" account.
// The payer for the batch transaction account rent.
func (inst *BatchAddTransaction) GetRentPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *BatchAddTransaction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *BatchAddTransaction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *BatchAddTransaction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst BatchAddTransaction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_BatchAddTransaction,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst BatchAddTransaction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *BatchAddTransaction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Multisig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Proposal is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Batch is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Transaction is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Member is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.RentPayer is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *BatchAddTransaction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("BatchAddTransaction")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     multisig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     proposal", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        batch", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  transaction", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       member", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    rentPayer", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj BatchAddTransaction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *BatchAddTransaction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewBatchAddTransactionInstruction declares a new BatchAddTransaction instruction with the provided parameters and accounts.
func NewBatchAddTransactionInstruction(
	// Parameters:
	args BatchAddTransactionArgs,
	// Accounts:
	multisig ag_solanago.PublicKey,
	proposal ag_solanago.PublicKey,
	batch ag_solanago.PublicKey,
	transaction ag_solanago.PublicKey,
	member ag_solanago.PublicKey,
	rentPayer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *BatchAddTransaction {
	return NewBatchAddTransactionInstructionBuilder().
		SetArgs(args).
		SetMultisigAccount(multisig).
		SetProposalAccount(proposal).
		SetBatchAccount(batch).
		SetTransactionAccount(transaction).
		SetMemberAccount(member).
		SetRentPayerAccount(rentPayer).
		SetSystemProgramAccount(systemProgram)
}
