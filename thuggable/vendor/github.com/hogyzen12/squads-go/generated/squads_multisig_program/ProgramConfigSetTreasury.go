// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_multisig_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Set the `treasury` parameter of the program config.
type ProgramConfigSetTreasury struct {
	Args *ProgramConfigSetTreasuryArgs

	// [0] = [WRITE] programConfig
	//
	// [1] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewProgramConfigSetTreasuryInstructionBuilder creates a new `ProgramConfigSetTreasury` instruction builder.
func NewProgramConfigSetTreasuryInstructionBuilder() *ProgramConfigSetTreasury {
	nd := &ProgramConfigSetTreasury{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *ProgramConfigSetTreasury) SetArgs(args ProgramConfigSetTreasuryArgs) *ProgramConfigSetTreasury {
	inst.Args = &args
	return inst
}

// SetProgramConfigAccount sets the "programConfig" account.
func (inst *ProgramConfigSetTreasury) SetProgramConfigAccount(programConfig ag_solanago.PublicKey) *ProgramConfigSetTreasury {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(programConfig).WRITE()
	return inst
}

// GetProgramConfigAccount gets the "programConfig" account.
func (inst *ProgramConfigSetTreasury) GetProgramConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ProgramConfigSetTreasury) SetAuthorityAccount(authority ag_solanago.PublicKey) *ProgramConfigSetTreasury {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ProgramConfigSetTreasury) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst ProgramConfigSetTreasury) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ProgramConfigSetTreasury,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ProgramConfigSetTreasury) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ProgramConfigSetTreasury) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ProgramConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *ProgramConfigSetTreasury) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ProgramConfigSetTreasury")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("programConfig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    authority", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj ProgramConfigSetTreasury) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ProgramConfigSetTreasury) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewProgramConfigSetTreasuryInstruction declares a new ProgramConfigSetTreasury instruction with the provided parameters and accounts.
func NewProgramConfigSetTreasuryInstruction(
	// Parameters:
	args ProgramConfigSetTreasuryArgs,
	// Accounts:
	programConfig ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *ProgramConfigSetTreasury {
	return NewProgramConfigSetTreasuryInstructionBuilder().
		SetArgs(args).
		SetProgramConfigAccount(programConfig).
		SetAuthorityAccount(authority)
}
