// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_multisig_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Remove the spending limit from the controlled multisig.
type MultisigRemoveSpendingLimit struct {
	Args *MultisigRemoveSpendingLimitArgs

	// [0] = [] multisig
	//
	// [1] = [SIGNER] configAuthority
	// ··········· Multisig `config_authority` that must authorize the configuration change.
	//
	// [2] = [WRITE] spendingLimit
	//
	// [3] = [WRITE] rentCollector
	// ··········· This is usually the same as `config_authority`, but can be a different account if needed.
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMultisigRemoveSpendingLimitInstructionBuilder creates a new `MultisigRemoveSpendingLimit` instruction builder.
func NewMultisigRemoveSpendingLimitInstructionBuilder() *MultisigRemoveSpendingLimit {
	nd := &MultisigRemoveSpendingLimit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *MultisigRemoveSpendingLimit) SetArgs(args MultisigRemoveSpendingLimitArgs) *MultisigRemoveSpendingLimit {
	inst.Args = &args
	return inst
}

// SetMultisigAccount sets the "multisig" account.
func (inst *MultisigRemoveSpendingLimit) SetMultisigAccount(multisig ag_solanago.PublicKey) *MultisigRemoveSpendingLimit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisig)
	return inst
}

// GetMultisigAccount gets the "multisig" account.
func (inst *MultisigRemoveSpendingLimit) GetMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAuthorityAccount sets the "configAuthority" account.
// Multisig `config_authority` that must authorize the configuration change.
func (inst *MultisigRemoveSpendingLimit) SetConfigAuthorityAccount(configAuthority ag_solanago.PublicKey) *MultisigRemoveSpendingLimit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(configAuthority).SIGNER()
	return inst
}

// GetConfigAuthorityAccount gets the "configAuthority" account.
// Multisig `config_authority` that must authorize the configuration change.
func (inst *MultisigRemoveSpendingLimit) GetConfigAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSpendingLimitAccount sets the "spendingLimit" account.
func (inst *MultisigRemoveSpendingLimit) SetSpendingLimitAccount(spendingLimit ag_solanago.PublicKey) *MultisigRemoveSpendingLimit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(spendingLimit).WRITE()
	return inst
}

// GetSpendingLimitAccount gets the "spendingLimit" account.
func (inst *MultisigRemoveSpendingLimit) GetSpendingLimitAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRentCollectorAccount sets the "rentCollector" account.
// This is usually the same as `config_authority`, but can be a different account if needed.
func (inst *MultisigRemoveSpendingLimit) SetRentCollectorAccount(rentCollector ag_solanago.PublicKey) *MultisigRemoveSpendingLimit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(rentCollector).WRITE()
	return inst
}

// GetRentCollectorAccount gets the "rentCollector" account.
// This is usually the same as `config_authority`, but can be a different account if needed.
func (inst *MultisigRemoveSpendingLimit) GetRentCollectorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst MultisigRemoveSpendingLimit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MultisigRemoveSpendingLimit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MultisigRemoveSpendingLimit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MultisigRemoveSpendingLimit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Multisig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ConfigAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SpendingLimit is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.RentCollector is not set")
		}
	}
	return nil
}

func (inst *MultisigRemoveSpendingLimit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MultisigRemoveSpendingLimit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       multisig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("configAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  spendingLimit", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  rentCollector", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj MultisigRemoveSpendingLimit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MultisigRemoveSpendingLimit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewMultisigRemoveSpendingLimitInstruction declares a new MultisigRemoveSpendingLimit instruction with the provided parameters and accounts.
func NewMultisigRemoveSpendingLimitInstruction(
	// Parameters:
	args MultisigRemoveSpendingLimitArgs,
	// Accounts:
	multisig ag_solanago.PublicKey,
	configAuthority ag_solanago.PublicKey,
	spendingLimit ag_solanago.PublicKey,
	rentCollector ag_solanago.PublicKey) *MultisigRemoveSpendingLimit {
	return NewMultisigRemoveSpendingLimitInstructionBuilder().
		SetArgs(args).
		SetMultisigAccount(multisig).
		SetConfigAuthorityAccount(configAuthority).
		SetSpendingLimitAccount(spendingLimit).
		SetRentCollectorAccount(rentCollector)
}
