// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_multisig_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Update status of a multisig proposal from `Draft` to `Active`.
type ProposalActivate struct {

	// [0] = [] multisig
	//
	// [1] = [WRITE, SIGNER] member
	//
	// [2] = [WRITE] proposal
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewProposalActivateInstructionBuilder creates a new `ProposalActivate` instruction builder.
func NewProposalActivateInstructionBuilder() *ProposalActivate {
	nd := &ProposalActivate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetMultisigAccount sets the "multisig" account.
func (inst *ProposalActivate) SetMultisigAccount(multisig ag_solanago.PublicKey) *ProposalActivate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisig)
	return inst
}

// GetMultisigAccount gets the "multisig" account.
func (inst *ProposalActivate) GetMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMemberAccount sets the "member" account.
func (inst *ProposalActivate) SetMemberAccount(member ag_solanago.PublicKey) *ProposalActivate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(member).WRITE().SIGNER()
	return inst
}

// GetMemberAccount gets the "member" account.
func (inst *ProposalActivate) GetMemberAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetProposalAccount sets the "proposal" account.
func (inst *ProposalActivate) SetProposalAccount(proposal ag_solanago.PublicKey) *ProposalActivate {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(proposal).WRITE()
	return inst
}

// GetProposalAccount gets the "proposal" account.
func (inst *ProposalActivate) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst ProposalActivate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ProposalActivate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ProposalActivate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ProposalActivate) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Multisig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Member is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Proposal is not set")
		}
	}
	return nil
}

func (inst *ProposalActivate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ProposalActivate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("multisig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  member", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("proposal", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj ProposalActivate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ProposalActivate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewProposalActivateInstruction declares a new ProposalActivate instruction with the provided parameters and accounts.
func NewProposalActivateInstruction(
	// Accounts:
	multisig ag_solanago.PublicKey,
	member ag_solanago.PublicKey,
	proposal ag_solanago.PublicKey) *ProposalActivate {
	return NewProposalActivateInstructionBuilder().
		SetMultisigAccount(multisig).
		SetMemberAccount(member).
		SetProposalAccount(proposal)
}
