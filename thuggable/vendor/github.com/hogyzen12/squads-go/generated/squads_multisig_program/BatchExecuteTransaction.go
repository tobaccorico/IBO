// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_multisig_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Execute a transaction from the batch.
type BatchExecuteTransaction struct {

	// [0] = [] multisig
	// ··········· Multisig account this batch belongs to.
	//
	// [1] = [SIGNER] member
	// ··········· Member of the multisig.
	//
	// [2] = [WRITE] proposal
	// ··········· The proposal account associated with the batch.
	// ··········· If `transaction` is the last in the batch, the `proposal` status will be set to `Executed`.
	//
	// [3] = [WRITE] batch
	//
	// [4] = [] transaction
	// ··········· Batch transaction to execute.
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewBatchExecuteTransactionInstructionBuilder creates a new `BatchExecuteTransaction` instruction builder.
func NewBatchExecuteTransactionInstructionBuilder() *BatchExecuteTransaction {
	nd := &BatchExecuteTransaction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetMultisigAccount sets the "multisig" account.
// Multisig account this batch belongs to.
func (inst *BatchExecuteTransaction) SetMultisigAccount(multisig ag_solanago.PublicKey) *BatchExecuteTransaction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisig)
	return inst
}

// GetMultisigAccount gets the "multisig" account.
// Multisig account this batch belongs to.
func (inst *BatchExecuteTransaction) GetMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMemberAccount sets the "member" account.
// Member of the multisig.
func (inst *BatchExecuteTransaction) SetMemberAccount(member ag_solanago.PublicKey) *BatchExecuteTransaction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(member).SIGNER()
	return inst
}

// GetMemberAccount gets the "member" account.
// Member of the multisig.
func (inst *BatchExecuteTransaction) GetMemberAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetProposalAccount sets the "proposal" account.
// The proposal account associated with the batch.
// If `transaction` is the last in the batch, the `proposal` status will be set to `Executed`.
func (inst *BatchExecuteTransaction) SetProposalAccount(proposal ag_solanago.PublicKey) *BatchExecuteTransaction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(proposal).WRITE()
	return inst
}

// GetProposalAccount gets the "proposal" account.
// The proposal account associated with the batch.
// If `transaction` is the last in the batch, the `proposal` status will be set to `Executed`.
func (inst *BatchExecuteTransaction) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBatchAccount sets the "batch" account.
func (inst *BatchExecuteTransaction) SetBatchAccount(batch ag_solanago.PublicKey) *BatchExecuteTransaction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(batch).WRITE()
	return inst
}

// GetBatchAccount gets the "batch" account.
func (inst *BatchExecuteTransaction) GetBatchAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTransactionAccount sets the "transaction" account.
// Batch transaction to execute.
func (inst *BatchExecuteTransaction) SetTransactionAccount(transaction ag_solanago.PublicKey) *BatchExecuteTransaction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(transaction)
	return inst
}

// GetTransactionAccount gets the "transaction" account.
// Batch transaction to execute.
func (inst *BatchExecuteTransaction) GetTransactionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst BatchExecuteTransaction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_BatchExecuteTransaction,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst BatchExecuteTransaction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *BatchExecuteTransaction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Multisig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Member is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Proposal is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Batch is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Transaction is not set")
		}
	}
	return nil
}

func (inst *BatchExecuteTransaction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("BatchExecuteTransaction")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   multisig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     member", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   proposal", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      batch", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("transaction", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj BatchExecuteTransaction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *BatchExecuteTransaction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewBatchExecuteTransactionInstruction declares a new BatchExecuteTransaction instruction with the provided parameters and accounts.
func NewBatchExecuteTransactionInstruction(
	// Accounts:
	multisig ag_solanago.PublicKey,
	member ag_solanago.PublicKey,
	proposal ag_solanago.PublicKey,
	batch ag_solanago.PublicKey,
	transaction ag_solanago.PublicKey) *BatchExecuteTransaction {
	return NewBatchExecuteTransactionInstructionBuilder().
		SetMultisigAccount(multisig).
		SetMemberAccount(member).
		SetProposalAccount(proposal).
		SetBatchAccount(batch).
		SetTransactionAccount(transaction)
}
