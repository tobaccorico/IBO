// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_multisig_program

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type BatchAddTransactionArgs struct {
	// Number of ephemeral signing PDAs required by the transaction.
	EphemeralSigners   uint8
	TransactionMessage []byte
}

func (obj BatchAddTransactionArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EphemeralSigners` param:
	err = encoder.Encode(obj.EphemeralSigners)
	if err != nil {
		return err
	}
	// Serialize `TransactionMessage` param:
	err = encoder.Encode(obj.TransactionMessage)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BatchAddTransactionArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EphemeralSigners`:
	err = decoder.Decode(&obj.EphemeralSigners)
	if err != nil {
		return err
	}
	// Deserialize `TransactionMessage`:
	err = decoder.Decode(&obj.TransactionMessage)
	if err != nil {
		return err
	}
	return nil
}

type BatchCreateArgs struct {
	// Index of the vault this transaction belongs to.
	VaultIndex uint8
	Memo       *string `bin:"optional"`
}

func (obj BatchCreateArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VaultIndex` param:
	err = encoder.Encode(obj.VaultIndex)
	if err != nil {
		return err
	}
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *BatchCreateArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VaultIndex`:
	err = decoder.Decode(&obj.VaultIndex)
	if err != nil {
		return err
	}
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type ConfigTransactionCreateArgs struct {
	Actions []ConfigAction
	Memo    *string `bin:"optional"`
}

func (obj ConfigTransactionCreateArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Actions` param:
	err = encoder.Encode(obj.Actions)
	if err != nil {
		return err
	}
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ConfigTransactionCreateArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Actions`:
	err = decoder.Decode(&obj.Actions)
	if err != nil {
		return err
	}
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type MultisigAddSpendingLimitArgs struct {
	// Key that is used to seed the SpendingLimit PDA.
	CreateKey ag_solanago.PublicKey

	// The index of the vault that the spending limit is for.
	VaultIndex uint8

	// The token mint the spending limit is for.
	Mint ag_solanago.PublicKey

	// The amount of tokens that can be spent in a period.
	// This amount is in decimals of the mint,
	// so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
	Amount uint64

	// The reset period of the spending limit.
	// When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
	Period Period

	// Members of the Spending Limit that can use it.
	// Don't have to be members of the multisig.
	Members []ag_solanago.PublicKey

	// The destination addresses the spending limit is allowed to sent funds to.
	// If empty, funds can be sent to any address.
	Destinations []ag_solanago.PublicKey

	// Memo is used for indexing only.
	Memo *string `bin:"optional"`
}

func (obj MultisigAddSpendingLimitArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CreateKey` param:
	err = encoder.Encode(obj.CreateKey)
	if err != nil {
		return err
	}
	// Serialize `VaultIndex` param:
	err = encoder.Encode(obj.VaultIndex)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Period` param:
	err = encoder.Encode(obj.Period)
	if err != nil {
		return err
	}
	// Serialize `Members` param:
	err = encoder.Encode(obj.Members)
	if err != nil {
		return err
	}
	// Serialize `Destinations` param:
	err = encoder.Encode(obj.Destinations)
	if err != nil {
		return err
	}
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *MultisigAddSpendingLimitArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CreateKey`:
	err = decoder.Decode(&obj.CreateKey)
	if err != nil {
		return err
	}
	// Deserialize `VaultIndex`:
	err = decoder.Decode(&obj.VaultIndex)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Period`:
	err = decoder.Decode(&obj.Period)
	if err != nil {
		return err
	}
	// Deserialize `Members`:
	err = decoder.Decode(&obj.Members)
	if err != nil {
		return err
	}
	// Deserialize `Destinations`:
	err = decoder.Decode(&obj.Destinations)
	if err != nil {
		return err
	}
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type MultisigAddMemberArgs struct {
	NewMember Member

	// Memo is used for indexing only.
	Memo *string `bin:"optional"`
}

func (obj MultisigAddMemberArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewMember` param:
	err = encoder.Encode(obj.NewMember)
	if err != nil {
		return err
	}
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *MultisigAddMemberArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewMember`:
	err = decoder.Decode(&obj.NewMember)
	if err != nil {
		return err
	}
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type MultisigRemoveMemberArgs struct {
	OldMember ag_solanago.PublicKey

	// Memo is used for indexing only.
	Memo *string `bin:"optional"`
}

func (obj MultisigRemoveMemberArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OldMember` param:
	err = encoder.Encode(obj.OldMember)
	if err != nil {
		return err
	}
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *MultisigRemoveMemberArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OldMember`:
	err = decoder.Decode(&obj.OldMember)
	if err != nil {
		return err
	}
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type MultisigChangeThresholdArgs struct {
	NewThreshold uint16

	// Memo is used for indexing only.
	Memo *string `bin:"optional"`
}

func (obj MultisigChangeThresholdArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewThreshold` param:
	err = encoder.Encode(obj.NewThreshold)
	if err != nil {
		return err
	}
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *MultisigChangeThresholdArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewThreshold`:
	err = decoder.Decode(&obj.NewThreshold)
	if err != nil {
		return err
	}
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type MultisigSetTimeLockArgs struct {
	TimeLock uint32

	// Memo is used for indexing only.
	Memo *string `bin:"optional"`
}

func (obj MultisigSetTimeLockArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TimeLock` param:
	err = encoder.Encode(obj.TimeLock)
	if err != nil {
		return err
	}
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *MultisigSetTimeLockArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TimeLock`:
	err = decoder.Decode(&obj.TimeLock)
	if err != nil {
		return err
	}
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type MultisigSetConfigAuthorityArgs struct {
	ConfigAuthority ag_solanago.PublicKey

	// Memo is used for indexing only.
	Memo *string `bin:"optional"`
}

func (obj MultisigSetConfigAuthorityArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ConfigAuthority` param:
	err = encoder.Encode(obj.ConfigAuthority)
	if err != nil {
		return err
	}
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *MultisigSetConfigAuthorityArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ConfigAuthority`:
	err = decoder.Decode(&obj.ConfigAuthority)
	if err != nil {
		return err
	}
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type MultisigSetRentCollectorArgs struct {
	RentCollector *ag_solanago.PublicKey `bin:"optional"`

	// Memo is used for indexing only.
	Memo *string `bin:"optional"`
}

func (obj MultisigSetRentCollectorArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RentCollector` param (optional):
	{
		if obj.RentCollector == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RentCollector)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *MultisigSetRentCollectorArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RentCollector` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RentCollector)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type MultisigCreateArgsV2 struct {
	// The authority that can configure the multisig: add/remove members, change the threshold, etc.
	// Should be set to `None` for autonomous multisigs.
	ConfigAuthority *ag_solanago.PublicKey `bin:"optional"`

	// The number of signatures required to execute a transaction.
	Threshold uint16

	// The members of the multisig.
	Members []Member

	// How many seconds must pass between transaction voting, settlement, and execution.
	TimeLock uint32

	// The address where the rent for the accounts related to executed, rejected, or cancelled
	// transactions can be reclaimed. If set to `None`, the rent reclamation feature is turned off.
	RentCollector *ag_solanago.PublicKey `bin:"optional"`

	// Memo is used for indexing only.
	Memo *string `bin:"optional"`
}

func (obj MultisigCreateArgsV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ConfigAuthority` param (optional):
	{
		if obj.ConfigAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ConfigAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Threshold` param:
	err = encoder.Encode(obj.Threshold)
	if err != nil {
		return err
	}
	// Serialize `Members` param:
	err = encoder.Encode(obj.Members)
	if err != nil {
		return err
	}
	// Serialize `TimeLock` param:
	err = encoder.Encode(obj.TimeLock)
	if err != nil {
		return err
	}
	// Serialize `RentCollector` param (optional):
	{
		if obj.RentCollector == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RentCollector)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *MultisigCreateArgsV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ConfigAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ConfigAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Threshold`:
	err = decoder.Decode(&obj.Threshold)
	if err != nil {
		return err
	}
	// Deserialize `Members`:
	err = decoder.Decode(&obj.Members)
	if err != nil {
		return err
	}
	// Deserialize `TimeLock`:
	err = decoder.Decode(&obj.TimeLock)
	if err != nil {
		return err
	}
	// Deserialize `RentCollector` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RentCollector)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type MultisigRemoveSpendingLimitArgs struct {
	// Memo is used for indexing only.
	Memo *string `bin:"optional"`
}

func (obj MultisigRemoveSpendingLimitArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *MultisigRemoveSpendingLimitArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type ProgramConfigInitArgs struct {
	// The authority that can configure the program config: change the treasury, etc.
	Authority ag_solanago.PublicKey

	// The fee that is charged for creating a new multisig.
	MultisigCreationFee uint64

	// The treasury where the creation fee is transferred to.
	Treasury ag_solanago.PublicKey
}

func (obj ProgramConfigInitArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `MultisigCreationFee` param:
	err = encoder.Encode(obj.MultisigCreationFee)
	if err != nil {
		return err
	}
	// Serialize `Treasury` param:
	err = encoder.Encode(obj.Treasury)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProgramConfigInitArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `MultisigCreationFee`:
	err = decoder.Decode(&obj.MultisigCreationFee)
	if err != nil {
		return err
	}
	// Deserialize `Treasury`:
	err = decoder.Decode(&obj.Treasury)
	if err != nil {
		return err
	}
	return nil
}

type ProgramConfigSetAuthorityArgs struct {
	NewAuthority ag_solanago.PublicKey
}

func (obj ProgramConfigSetAuthorityArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewAuthority` param:
	err = encoder.Encode(obj.NewAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProgramConfigSetAuthorityArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewAuthority`:
	err = decoder.Decode(&obj.NewAuthority)
	if err != nil {
		return err
	}
	return nil
}

type ProgramConfigSetMultisigCreationFeeArgs struct {
	NewMultisigCreationFee uint64
}

func (obj ProgramConfigSetMultisigCreationFeeArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewMultisigCreationFee` param:
	err = encoder.Encode(obj.NewMultisigCreationFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProgramConfigSetMultisigCreationFeeArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewMultisigCreationFee`:
	err = decoder.Decode(&obj.NewMultisigCreationFee)
	if err != nil {
		return err
	}
	return nil
}

type ProgramConfigSetTreasuryArgs struct {
	NewTreasury ag_solanago.PublicKey
}

func (obj ProgramConfigSetTreasuryArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewTreasury` param:
	err = encoder.Encode(obj.NewTreasury)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProgramConfigSetTreasuryArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewTreasury`:
	err = decoder.Decode(&obj.NewTreasury)
	if err != nil {
		return err
	}
	return nil
}

type ProposalCreateArgs struct {
	// Index of the multisig transaction this proposal is associated with.
	TransactionIndex uint64

	// Whether the proposal should be initialized with status `Draft`.
	Draft bool
}

func (obj ProposalCreateArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TransactionIndex` param:
	err = encoder.Encode(obj.TransactionIndex)
	if err != nil {
		return err
	}
	// Serialize `Draft` param:
	err = encoder.Encode(obj.Draft)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProposalCreateArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TransactionIndex`:
	err = decoder.Decode(&obj.TransactionIndex)
	if err != nil {
		return err
	}
	// Deserialize `Draft`:
	err = decoder.Decode(&obj.Draft)
	if err != nil {
		return err
	}
	return nil
}

type ProposalVoteArgs struct {
	Memo *string `bin:"optional"`
}

func (obj ProposalVoteArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ProposalVoteArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type SpendingLimitUseArgs struct {
	// Amount of tokens to transfer.
	Amount uint64

	// Decimals of the token mint. Used for double-checking against incorrect order of magnitude of `amount`.
	Decimals uint8

	// Memo used for indexing.
	Memo *string `bin:"optional"`
}

func (obj SpendingLimitUseArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *SpendingLimitUseArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type TransactionBufferCreateArgs struct {
	// Index of the buffer account to seed the account derivation
	BufferIndex uint8

	// Index of the vault this transaction belongs to.
	VaultIndex uint8

	// Hash of the final assembled transaction message.
	FinalBufferHash [32]uint8

	// Final size of the buffer.
	FinalBufferSize uint16

	// Initial slice of the buffer.
	Buffer []byte
}

func (obj TransactionBufferCreateArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BufferIndex` param:
	err = encoder.Encode(obj.BufferIndex)
	if err != nil {
		return err
	}
	// Serialize `VaultIndex` param:
	err = encoder.Encode(obj.VaultIndex)
	if err != nil {
		return err
	}
	// Serialize `FinalBufferHash` param:
	err = encoder.Encode(obj.FinalBufferHash)
	if err != nil {
		return err
	}
	// Serialize `FinalBufferSize` param:
	err = encoder.Encode(obj.FinalBufferSize)
	if err != nil {
		return err
	}
	// Serialize `Buffer` param:
	err = encoder.Encode(obj.Buffer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TransactionBufferCreateArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BufferIndex`:
	err = decoder.Decode(&obj.BufferIndex)
	if err != nil {
		return err
	}
	// Deserialize `VaultIndex`:
	err = decoder.Decode(&obj.VaultIndex)
	if err != nil {
		return err
	}
	// Deserialize `FinalBufferHash`:
	err = decoder.Decode(&obj.FinalBufferHash)
	if err != nil {
		return err
	}
	// Deserialize `FinalBufferSize`:
	err = decoder.Decode(&obj.FinalBufferSize)
	if err != nil {
		return err
	}
	// Deserialize `Buffer`:
	err = decoder.Decode(&obj.Buffer)
	if err != nil {
		return err
	}
	return nil
}

type TransactionBufferExtendArgs struct {
	Buffer []byte
}

func (obj TransactionBufferExtendArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Buffer` param:
	err = encoder.Encode(obj.Buffer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TransactionBufferExtendArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Buffer`:
	err = decoder.Decode(&obj.Buffer)
	if err != nil {
		return err
	}
	return nil
}

type VaultTransactionCreateArgs struct {
	// Index of the vault this transaction belongs to.
	VaultIndex uint8

	// Number of ephemeral signing PDAs required by the transaction.
	EphemeralSigners   uint8
	TransactionMessage []byte
	Memo               *string `bin:"optional"`
}

func (obj VaultTransactionCreateArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VaultIndex` param:
	err = encoder.Encode(obj.VaultIndex)
	if err != nil {
		return err
	}
	// Serialize `EphemeralSigners` param:
	err = encoder.Encode(obj.EphemeralSigners)
	if err != nil {
		return err
	}
	// Serialize `TransactionMessage` param:
	err = encoder.Encode(obj.TransactionMessage)
	if err != nil {
		return err
	}
	// Serialize `Memo` param (optional):
	{
		if obj.Memo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *VaultTransactionCreateArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VaultIndex`:
	err = decoder.Decode(&obj.VaultIndex)
	if err != nil {
		return err
	}
	// Deserialize `EphemeralSigners`:
	err = decoder.Decode(&obj.EphemeralSigners)
	if err != nil {
		return err
	}
	// Deserialize `TransactionMessage`:
	err = decoder.Decode(&obj.TransactionMessage)
	if err != nil {
		return err
	}
	// Deserialize `Memo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Memo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type Member struct {
	Key         ag_solanago.PublicKey
	Permissions Permissions
}

func (obj Member) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Permissions` param:
	err = encoder.Encode(obj.Permissions)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Member) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Permissions`:
	err = decoder.Decode(&obj.Permissions)
	if err != nil {
		return err
	}
	return nil
}

type Permissions struct {
	Mask uint8
}

func (obj Permissions) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mask` param:
	err = encoder.Encode(obj.Mask)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Permissions) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mask`:
	err = decoder.Decode(&obj.Mask)
	if err != nil {
		return err
	}
	return nil
}

type VaultTransactionMessage struct {
	// The number of signer pubkeys in the account_keys vec.
	NumSigners uint8

	// The number of writable signer pubkeys in the account_keys vec.
	NumWritableSigners uint8

	// The number of writable non-signer pubkeys in the account_keys vec.
	NumWritableNonSigners uint8

	// Unique account pubkeys (including program IDs) required for execution of the tx.
	// The signer pubkeys appear at the beginning of the vec, with writable pubkeys first, and read-only pubkeys following.
	// The non-signer pubkeys follow with writable pubkeys first and read-only ones following.
	// Program IDs are also stored at the end of the vec along with other non-signer non-writable pubkeys:
	//
	// ```plaintext
	// [pubkey1, pubkey2, pubkey3, pubkey4, pubkey5, pubkey6, pubkey7, pubkey8]
	// |---writable---|  |---readonly---|  |---writable---|  |---readonly---|
	// |------------signers-------------|  |----------non-singers-----------|
	// ```
	AccountKeys []ag_solanago.PublicKey

	// List of instructions making up the tx.
	Instructions []MultisigCompiledInstruction

	// List of address table lookups used to load additional accounts
	// for this transaction.
	AddressTableLookups []MultisigMessageAddressTableLookup
}

func (obj VaultTransactionMessage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NumSigners` param:
	err = encoder.Encode(obj.NumSigners)
	if err != nil {
		return err
	}
	// Serialize `NumWritableSigners` param:
	err = encoder.Encode(obj.NumWritableSigners)
	if err != nil {
		return err
	}
	// Serialize `NumWritableNonSigners` param:
	err = encoder.Encode(obj.NumWritableNonSigners)
	if err != nil {
		return err
	}
	// Serialize `AccountKeys` param:
	err = encoder.Encode(obj.AccountKeys)
	if err != nil {
		return err
	}
	// Serialize `Instructions` param:
	err = encoder.Encode(obj.Instructions)
	if err != nil {
		return err
	}
	// Serialize `AddressTableLookups` param:
	err = encoder.Encode(obj.AddressTableLookups)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VaultTransactionMessage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NumSigners`:
	err = decoder.Decode(&obj.NumSigners)
	if err != nil {
		return err
	}
	// Deserialize `NumWritableSigners`:
	err = decoder.Decode(&obj.NumWritableSigners)
	if err != nil {
		return err
	}
	// Deserialize `NumWritableNonSigners`:
	err = decoder.Decode(&obj.NumWritableNonSigners)
	if err != nil {
		return err
	}
	// Deserialize `AccountKeys`:
	err = decoder.Decode(&obj.AccountKeys)
	if err != nil {
		return err
	}
	// Deserialize `Instructions`:
	err = decoder.Decode(&obj.Instructions)
	if err != nil {
		return err
	}
	// Deserialize `AddressTableLookups`:
	err = decoder.Decode(&obj.AddressTableLookups)
	if err != nil {
		return err
	}
	return nil
}

type MultisigCompiledInstruction struct {
	ProgramIdIndex uint8

	// Indices into the tx's `account_keys` list indicating which accounts to pass to the instruction.
	AccountIndexes []byte

	// Instruction data.
	Data []byte
}

func (obj MultisigCompiledInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProgramIdIndex` param:
	err = encoder.Encode(obj.ProgramIdIndex)
	if err != nil {
		return err
	}
	// Serialize `AccountIndexes` param:
	err = encoder.Encode(obj.AccountIndexes)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MultisigCompiledInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProgramIdIndex`:
	err = decoder.Decode(&obj.ProgramIdIndex)
	if err != nil {
		return err
	}
	// Deserialize `AccountIndexes`:
	err = decoder.Decode(&obj.AccountIndexes)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type MultisigMessageAddressTableLookup struct {
	// Address lookup table account key.
	AccountKey ag_solanago.PublicKey

	// List of indexes used to load writable accounts.
	WritableIndexes []byte

	// List of indexes used to load readonly accounts.
	ReadonlyIndexes []byte
}

func (obj MultisigMessageAddressTableLookup) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AccountKey` param:
	err = encoder.Encode(obj.AccountKey)
	if err != nil {
		return err
	}
	// Serialize `WritableIndexes` param:
	err = encoder.Encode(obj.WritableIndexes)
	if err != nil {
		return err
	}
	// Serialize `ReadonlyIndexes` param:
	err = encoder.Encode(obj.ReadonlyIndexes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MultisigMessageAddressTableLookup) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AccountKey`:
	err = decoder.Decode(&obj.AccountKey)
	if err != nil {
		return err
	}
	// Deserialize `WritableIndexes`:
	err = decoder.Decode(&obj.WritableIndexes)
	if err != nil {
		return err
	}
	// Deserialize `ReadonlyIndexes`:
	err = decoder.Decode(&obj.ReadonlyIndexes)
	if err != nil {
		return err
	}
	return nil
}

type Vote ag_binary.BorshEnum

const (
	VoteApprove Vote = iota
	VoteReject
	VoteCancel
)

func (value Vote) String() string {
	switch value {
	case VoteApprove:
		return "Approve"
	case VoteReject:
		return "Reject"
	case VoteCancel:
		return "Cancel"
	default:
		return ""
	}
}

type ConfigAction interface {
	isConfigAction()
}

type configActionContainer struct {
	Enum                ag_binary.BorshEnum `borsh_enum:"true"`
	AddMember           ConfigActionAddMember
	RemoveMember        ConfigActionRemoveMember
	ChangeThreshold     ConfigActionChangeThreshold
	SetTimeLock         ConfigActionSetTimeLock
	AddSpendingLimit    ConfigActionAddSpendingLimit
	RemoveSpendingLimit ConfigActionRemoveSpendingLimit
	SetRentCollector    ConfigActionSetRentCollector
}

type ConfigActionAddMember struct {
	NewMember Member
}

func (obj ConfigActionAddMember) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewMember` param:
	err = encoder.Encode(obj.NewMember)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigActionAddMember) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewMember`:
	err = decoder.Decode(&obj.NewMember)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ConfigActionAddMember) isConfigAction() {}

type ConfigActionRemoveMember struct {
	OldMember ag_solanago.PublicKey
}

func (obj ConfigActionRemoveMember) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OldMember` param:
	err = encoder.Encode(obj.OldMember)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigActionRemoveMember) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OldMember`:
	err = decoder.Decode(&obj.OldMember)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ConfigActionRemoveMember) isConfigAction() {}

type ConfigActionChangeThreshold struct {
	NewThreshold uint16
}

func (obj ConfigActionChangeThreshold) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewThreshold` param:
	err = encoder.Encode(obj.NewThreshold)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigActionChangeThreshold) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewThreshold`:
	err = decoder.Decode(&obj.NewThreshold)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ConfigActionChangeThreshold) isConfigAction() {}

type ConfigActionSetTimeLock struct {
	NewTimeLock uint32
}

func (obj ConfigActionSetTimeLock) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewTimeLock` param:
	err = encoder.Encode(obj.NewTimeLock)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigActionSetTimeLock) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewTimeLock`:
	err = decoder.Decode(&obj.NewTimeLock)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ConfigActionSetTimeLock) isConfigAction() {}

type ConfigActionAddSpendingLimit struct {
	CreateKey    ag_solanago.PublicKey
	VaultIndex   uint8
	Mint         ag_solanago.PublicKey
	Amount       uint64
	Period       Period
	Members      []ag_solanago.PublicKey
	Destinations []ag_solanago.PublicKey
}

func (obj ConfigActionAddSpendingLimit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CreateKey` param:
	err = encoder.Encode(obj.CreateKey)
	if err != nil {
		return err
	}
	// Serialize `VaultIndex` param:
	err = encoder.Encode(obj.VaultIndex)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Period` param:
	err = encoder.Encode(obj.Period)
	if err != nil {
		return err
	}
	// Serialize `Members` param:
	err = encoder.Encode(obj.Members)
	if err != nil {
		return err
	}
	// Serialize `Destinations` param:
	err = encoder.Encode(obj.Destinations)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigActionAddSpendingLimit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CreateKey`:
	err = decoder.Decode(&obj.CreateKey)
	if err != nil {
		return err
	}
	// Deserialize `VaultIndex`:
	err = decoder.Decode(&obj.VaultIndex)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Period`:
	err = decoder.Decode(&obj.Period)
	if err != nil {
		return err
	}
	// Deserialize `Members`:
	err = decoder.Decode(&obj.Members)
	if err != nil {
		return err
	}
	// Deserialize `Destinations`:
	err = decoder.Decode(&obj.Destinations)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ConfigActionAddSpendingLimit) isConfigAction() {}

type ConfigActionRemoveSpendingLimit struct {
	SpendingLimit ag_solanago.PublicKey
}

func (obj ConfigActionRemoveSpendingLimit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SpendingLimit` param:
	err = encoder.Encode(obj.SpendingLimit)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigActionRemoveSpendingLimit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SpendingLimit`:
	err = decoder.Decode(&obj.SpendingLimit)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ConfigActionRemoveSpendingLimit) isConfigAction() {}

type ConfigActionSetRentCollector struct {
	NewRentCollector *ag_solanago.PublicKey `bin:"optional"`
}

func (obj ConfigActionSetRentCollector) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewRentCollector` param (optional):
	{
		if obj.NewRentCollector == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NewRentCollector)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ConfigActionSetRentCollector) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewRentCollector` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NewRentCollector)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (_ *ConfigActionSetRentCollector) isConfigAction() {}

type ProposalStatus interface {
	isProposalStatus()
}

type proposalStatusContainer struct {
	Enum      ag_binary.BorshEnum `borsh_enum:"true"`
	Draft     ProposalStatusDraft
	Active    ProposalStatusActive
	Rejected  ProposalStatusRejected
	Approved  ProposalStatusApproved
	Executing ProposalStatusExecuting
	Executed  ProposalStatusExecuted
	Cancelled ProposalStatusCancelled
}

type ProposalStatusDraft struct {
	Timestamp int64
}

func (obj ProposalStatusDraft) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProposalStatusDraft) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ProposalStatusDraft) isProposalStatus() {}

type ProposalStatusActive struct {
	Timestamp int64
}

func (obj ProposalStatusActive) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProposalStatusActive) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ProposalStatusActive) isProposalStatus() {}

type ProposalStatusRejected struct {
	Timestamp int64
}

func (obj ProposalStatusRejected) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProposalStatusRejected) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ProposalStatusRejected) isProposalStatus() {}

type ProposalStatusApproved struct {
	Timestamp int64
}

func (obj ProposalStatusApproved) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProposalStatusApproved) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ProposalStatusApproved) isProposalStatus() {}

type ProposalStatusExecuting uint8

func (obj ProposalStatusExecuting) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ProposalStatusExecuting) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *ProposalStatusExecuting) isProposalStatus() {}

type ProposalStatusExecuted struct {
	Timestamp int64
}

func (obj ProposalStatusExecuted) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProposalStatusExecuted) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ProposalStatusExecuted) isProposalStatus() {}

type ProposalStatusCancelled struct {
	Timestamp int64
}

func (obj ProposalStatusCancelled) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProposalStatusCancelled) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ProposalStatusCancelled) isProposalStatus() {}

type Period ag_binary.BorshEnum

const (
	PeriodOneTime Period = iota
	PeriodDay
	PeriodWeek
	PeriodMonth
)

func (value Period) String() string {
	switch value {
	case PeriodOneTime:
		return "OneTime"
	case PeriodDay:
		return "Day"
	case PeriodWeek:
		return "Week"
	case PeriodMonth:
		return "Month"
	default:
		return ""
	}
}
