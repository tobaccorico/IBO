// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_multisig_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Cancel a multisig proposal on behalf of the `member`.
// The proposal must be `Approved`.
// This was introduced to incorporate proper state update, as old multisig members
// may have lingering votes, and the proposal size may need to be reallocated to
// accommodate the new amount of cancel votes.
// The previous implemenation still works if the proposal size is in line with the
// threshold size.
type ProposalCancelV2 struct {
	Args *ProposalVoteArgs

	// ····· proposalVote: [0] = [] multisig
	//
	// ··················· [1] = [WRITE, SIGNER] member
	//
	// ··················· [2] = [WRITE] proposal
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewProposalCancelV2InstructionBuilder creates a new `ProposalCancelV2` instruction builder.
func NewProposalCancelV2InstructionBuilder() *ProposalCancelV2 {
	nd := &ProposalCancelV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *ProposalCancelV2) SetArgs(args ProposalVoteArgs) *ProposalCancelV2 {
	inst.Args = &args
	return inst
}

type ProposalCancelV2ProposalVoteAccountsBuilder struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

func NewProposalCancelV2ProposalVoteAccountsBuilder() *ProposalCancelV2ProposalVoteAccountsBuilder {
	return &ProposalCancelV2ProposalVoteAccountsBuilder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
}

func (inst *ProposalCancelV2) SetProposalVoteAccountsFromBuilder(proposalCancelV2ProposalVoteAccountsBuilder *ProposalCancelV2ProposalVoteAccountsBuilder) *ProposalCancelV2 {
	inst.AccountMetaSlice[0] = proposalCancelV2ProposalVoteAccountsBuilder.GetMultisigAccount()
	inst.AccountMetaSlice[1] = proposalCancelV2ProposalVoteAccountsBuilder.GetMemberAccount()
	inst.AccountMetaSlice[2] = proposalCancelV2ProposalVoteAccountsBuilder.GetProposalAccount()
	return inst
}

// SetMultisigAccount sets the "multisig" account.
func (inst *ProposalCancelV2ProposalVoteAccountsBuilder) SetMultisigAccount(multisig ag_solanago.PublicKey) *ProposalCancelV2ProposalVoteAccountsBuilder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisig)
	return inst
}

// GetMultisigAccount gets the "multisig" account.
func (inst *ProposalCancelV2ProposalVoteAccountsBuilder) GetMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMemberAccount sets the "member" account.
func (inst *ProposalCancelV2ProposalVoteAccountsBuilder) SetMemberAccount(member ag_solanago.PublicKey) *ProposalCancelV2ProposalVoteAccountsBuilder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(member).WRITE().SIGNER()
	return inst
}

// GetMemberAccount gets the "member" account.
func (inst *ProposalCancelV2ProposalVoteAccountsBuilder) GetMemberAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetProposalAccount sets the "proposal" account.
func (inst *ProposalCancelV2ProposalVoteAccountsBuilder) SetProposalAccount(proposal ag_solanago.PublicKey) *ProposalCancelV2ProposalVoteAccountsBuilder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(proposal).WRITE()
	return inst
}

// GetProposalAccount gets the "proposal" account.
func (inst *ProposalCancelV2ProposalVoteAccountsBuilder) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ProposalCancelV2) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ProposalCancelV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ProposalCancelV2) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst ProposalCancelV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ProposalCancelV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ProposalCancelV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ProposalCancelV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ProposalVoteMultisig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ProposalVoteMember is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ProposalVoteProposal is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *ProposalCancelV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ProposalCancelV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("proposalVote/multisig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  proposalVote/member", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("proposalVote/proposal", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj ProposalCancelV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ProposalCancelV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewProposalCancelV2Instruction declares a new ProposalCancelV2 instruction with the provided parameters and accounts.
func NewProposalCancelV2Instruction(
	// Parameters:
	args ProposalVoteArgs,
	// Accounts:
	proposalVoteMultisig ag_solanago.PublicKey,
	proposalVoteMember ag_solanago.PublicKey,
	proposalVoteProposal ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ProposalCancelV2 {
	return NewProposalCancelV2InstructionBuilder().
		SetArgs(args).
		SetProposalVoteAccountsFromBuilder(
			NewProposalCancelV2ProposalVoteAccountsBuilder().
				SetMultisigAccount(proposalVoteMultisig).
				SetMemberAccount(proposalVoteMember).
				SetProposalAccount(proposalVoteProposal),
		).
		SetSystemProgramAccount(systemProgram)
}
