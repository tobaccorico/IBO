// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_multisig_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Set the `threshold` config parameter for the controlled multisig.
type MultisigChangeThreshold struct {
	Args *MultisigChangeThresholdArgs

	// [0] = [WRITE] multisig
	//
	// [1] = [SIGNER] configAuthority
	// ··········· Multisig `config_authority` that must authorize the configuration change.
	//
	// [2] = [WRITE, SIGNER] rentPayer
	// ··········· The account that will be charged or credited in case the multisig account needs to reallocate space,
	// ··········· for example when adding a new member or a spending limit.
	// ··········· This is usually the same as `config_authority`, but can be a different account if needed.
	//
	// [3] = [] systemProgram
	// ··········· We might need it in case reallocation is needed.
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMultisigChangeThresholdInstructionBuilder creates a new `MultisigChangeThreshold` instruction builder.
func NewMultisigChangeThresholdInstructionBuilder() *MultisigChangeThreshold {
	nd := &MultisigChangeThreshold{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *MultisigChangeThreshold) SetArgs(args MultisigChangeThresholdArgs) *MultisigChangeThreshold {
	inst.Args = &args
	return inst
}

// SetMultisigAccount sets the "multisig" account.
func (inst *MultisigChangeThreshold) SetMultisigAccount(multisig ag_solanago.PublicKey) *MultisigChangeThreshold {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisig).WRITE()
	return inst
}

// GetMultisigAccount gets the "multisig" account.
func (inst *MultisigChangeThreshold) GetMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAuthorityAccount sets the "configAuthority" account.
// Multisig `config_authority` that must authorize the configuration change.
func (inst *MultisigChangeThreshold) SetConfigAuthorityAccount(configAuthority ag_solanago.PublicKey) *MultisigChangeThreshold {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(configAuthority).SIGNER()
	return inst
}

// GetConfigAuthorityAccount gets the "configAuthority" account.
// Multisig `config_authority` that must authorize the configuration change.
func (inst *MultisigChangeThreshold) GetConfigAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRentPayerAccount sets the "rentPayer" account.
// The account that will be charged or credited in case the multisig account needs to reallocate space,
// for example when adding a new member or a spending limit.
// This is usually the same as `config_authority`, but can be a different account if needed.
func (inst *MultisigChangeThreshold) SetRentPayerAccount(rentPayer ag_solanago.PublicKey) *MultisigChangeThreshold {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rentPayer).WRITE().SIGNER()
	return inst
}

// GetRentPayerAccount gets the "rentPayer" account.
// The account that will be charged or credited in case the multisig account needs to reallocate space,
// for example when adding a new member or a spending limit.
// This is usually the same as `config_authority`, but can be a different account if needed.
func (inst *MultisigChangeThreshold) GetRentPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
// We might need it in case reallocation is needed.
func (inst *MultisigChangeThreshold) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MultisigChangeThreshold {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
// We might need it in case reallocation is needed.
func (inst *MultisigChangeThreshold) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst MultisigChangeThreshold) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MultisigChangeThreshold,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MultisigChangeThreshold) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MultisigChangeThreshold) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Multisig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ConfigAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RentPayer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *MultisigChangeThreshold) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MultisigChangeThreshold")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       multisig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("configAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      rentPayer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj MultisigChangeThreshold) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MultisigChangeThreshold) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewMultisigChangeThresholdInstruction declares a new MultisigChangeThreshold instruction with the provided parameters and accounts.
func NewMultisigChangeThresholdInstruction(
	// Parameters:
	args MultisigChangeThresholdArgs,
	// Accounts:
	multisig ag_solanago.PublicKey,
	configAuthority ag_solanago.PublicKey,
	rentPayer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *MultisigChangeThreshold {
	return NewMultisigChangeThresholdInstructionBuilder().
		SetArgs(args).
		SetMultisigAccount(multisig).
		SetConfigAuthorityAccount(configAuthority).
		SetRentPayerAccount(rentPayer).
		SetSystemProgramAccount(systemProgram)
}
