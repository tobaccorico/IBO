// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_multisig_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Closes a `VaultTransaction` and the corresponding `Proposal`.
// `transaction` can be closed if either:
// - the `proposal` is in a terminal state: `Executed`, `Rejected`, or `Cancelled`.
// - the `proposal` is stale and not `Approved`.
type VaultTransactionAccountsClose struct {

	// [0] = [] multisig
	//
	// [1] = [WRITE] proposal
	// ··········· the logic within `vault_transaction_accounts_close` does the rest of the checks.
	//
	// [2] = [WRITE] transaction
	// ··········· VaultTransaction corresponding to the `proposal`.
	//
	// [3] = [WRITE] rentCollector
	// ··········· The rent collector.
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewVaultTransactionAccountsCloseInstructionBuilder creates a new `VaultTransactionAccountsClose` instruction builder.
func NewVaultTransactionAccountsCloseInstructionBuilder() *VaultTransactionAccountsClose {
	nd := &VaultTransactionAccountsClose{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetMultisigAccount sets the "multisig" account.
func (inst *VaultTransactionAccountsClose) SetMultisigAccount(multisig ag_solanago.PublicKey) *VaultTransactionAccountsClose {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisig)
	return inst
}

// GetMultisigAccount gets the "multisig" account.
func (inst *VaultTransactionAccountsClose) GetMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProposalAccount sets the "proposal" account.
// the logic within `vault_transaction_accounts_close` does the rest of the checks.
func (inst *VaultTransactionAccountsClose) SetProposalAccount(proposal ag_solanago.PublicKey) *VaultTransactionAccountsClose {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(proposal).WRITE()
	return inst
}

// GetProposalAccount gets the "proposal" account.
// the logic within `vault_transaction_accounts_close` does the rest of the checks.
func (inst *VaultTransactionAccountsClose) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTransactionAccount sets the "transaction" account.
// VaultTransaction corresponding to the `proposal`.
func (inst *VaultTransactionAccountsClose) SetTransactionAccount(transaction ag_solanago.PublicKey) *VaultTransactionAccountsClose {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(transaction).WRITE()
	return inst
}

// GetTransactionAccount gets the "transaction" account.
// VaultTransaction corresponding to the `proposal`.
func (inst *VaultTransactionAccountsClose) GetTransactionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRentCollectorAccount sets the "rentCollector" account.
// The rent collector.
func (inst *VaultTransactionAccountsClose) SetRentCollectorAccount(rentCollector ag_solanago.PublicKey) *VaultTransactionAccountsClose {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(rentCollector).WRITE()
	return inst
}

// GetRentCollectorAccount gets the "rentCollector" account.
// The rent collector.
func (inst *VaultTransactionAccountsClose) GetRentCollectorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *VaultTransactionAccountsClose) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *VaultTransactionAccountsClose {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *VaultTransactionAccountsClose) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst VaultTransactionAccountsClose) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_VaultTransactionAccountsClose,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst VaultTransactionAccountsClose) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *VaultTransactionAccountsClose) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Multisig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Proposal is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Transaction is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.RentCollector is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *VaultTransactionAccountsClose) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("VaultTransactionAccountsClose")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     multisig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     proposal", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  transaction", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("rentCollector", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj VaultTransactionAccountsClose) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *VaultTransactionAccountsClose) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewVaultTransactionAccountsCloseInstruction declares a new VaultTransactionAccountsClose instruction with the provided parameters and accounts.
func NewVaultTransactionAccountsCloseInstruction(
	// Accounts:
	multisig ag_solanago.PublicKey,
	proposal ag_solanago.PublicKey,
	transaction ag_solanago.PublicKey,
	rentCollector ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *VaultTransactionAccountsClose {
	return NewVaultTransactionAccountsCloseInstructionBuilder().
		SetMultisigAccount(multisig).
		SetProposalAccount(proposal).
		SetTransactionAccount(transaction).
		SetRentCollectorAccount(rentCollector).
		SetSystemProgramAccount(systemProgram)
}
