// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_multisig_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Create a new vault transaction from a completed transaction buffer.
// Finalized buffer hash must match `final_buffer_hash`
type VaultTransactionCreateFromBuffer struct {
	Args *VaultTransactionCreateArgs

	// ····· vaultTransactionCreate: [0] = [WRITE] multisig
	//
	// ····························· [1] = [WRITE] transaction
	//
	// ····························· [2] = [SIGNER] creator
	// ··································· The member of the multisig that is creating the transaction.
	//
	// ····························· [3] = [WRITE, SIGNER] rentPayer
	// ··································· The payer for the transaction account rent.
	//
	// ····························· [4] = [] systemProgram
	//
	// [5] = [WRITE] transactionBuffer
	//
	// [6] = [WRITE, SIGNER] creator
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewVaultTransactionCreateFromBufferInstructionBuilder creates a new `VaultTransactionCreateFromBuffer` instruction builder.
func NewVaultTransactionCreateFromBufferInstructionBuilder() *VaultTransactionCreateFromBuffer {
	nd := &VaultTransactionCreateFromBuffer{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *VaultTransactionCreateFromBuffer) SetArgs(args VaultTransactionCreateArgs) *VaultTransactionCreateFromBuffer {
	inst.Args = &args
	return inst
}

type VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

func NewVaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder() *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder {
	return &VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
}

func (inst *VaultTransactionCreateFromBuffer) SetVaultTransactionCreateAccountsFromBuilder(vaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder) *VaultTransactionCreateFromBuffer {
	inst.AccountMetaSlice[0] = vaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder.GetMultisigAccount()
	inst.AccountMetaSlice[1] = vaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder.GetTransactionAccount()
	inst.AccountMetaSlice[2] = vaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder.GetCreatorAccount()
	inst.AccountMetaSlice[3] = vaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder.GetRentPayerAccount()
	inst.AccountMetaSlice[4] = vaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder.GetSystemProgramAccount()
	return inst
}

// SetMultisigAccount sets the "multisig" account.
func (inst *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder) SetMultisigAccount(multisig ag_solanago.PublicKey) *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisig).WRITE()
	return inst
}

// GetMultisigAccount gets the "multisig" account.
func (inst *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder) GetMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTransactionAccount sets the "transaction" account.
func (inst *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder) SetTransactionAccount(transaction ag_solanago.PublicKey) *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(transaction).WRITE()
	return inst
}

// GetTransactionAccount gets the "transaction" account.
func (inst *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder) GetTransactionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCreatorAccount sets the "creator" account.
// The member of the multisig that is creating the transaction.
func (inst *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder) SetCreatorAccount(creator ag_solanago.PublicKey) *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(creator).SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
// The member of the multisig that is creating the transaction.
func (inst *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRentPayerAccount sets the "rentPayer" account.
// The payer for the transaction account rent.
func (inst *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder) SetRentPayerAccount(rentPayer ag_solanago.PublicKey) *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(rentPayer).WRITE().SIGNER()
	return inst
}

// GetRentPayerAccount gets the "rentPayer" account.
// The payer for the transaction account rent.
func (inst *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder) GetRentPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *VaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTransactionBufferAccount sets the "transactionBuffer" account.
func (inst *VaultTransactionCreateFromBuffer) SetTransactionBufferAccount(transactionBuffer ag_solanago.PublicKey) *VaultTransactionCreateFromBuffer {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(transactionBuffer).WRITE()
	return inst
}

// GetTransactionBufferAccount gets the "transactionBuffer" account.
func (inst *VaultTransactionCreateFromBuffer) GetTransactionBufferAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCreatorAccount sets the "creator" account.
func (inst *VaultTransactionCreateFromBuffer) SetCreatorAccount(creator ag_solanago.PublicKey) *VaultTransactionCreateFromBuffer {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *VaultTransactionCreateFromBuffer) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst VaultTransactionCreateFromBuffer) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_VaultTransactionCreateFromBuffer,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst VaultTransactionCreateFromBuffer) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *VaultTransactionCreateFromBuffer) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.VaultTransactionCreateMultisig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.VaultTransactionCreateTransaction is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.VaultTransactionCreateCreator is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.VaultTransactionCreateRentPayer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.VaultTransactionCreateSystemProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TransactionBuffer is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Creator is not set")
		}
	}
	return nil
}

func (inst *VaultTransactionCreateFromBuffer) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("VaultTransactionCreateFromBuffer")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     vaultTransactionCreate/multisig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  vaultTransactionCreate/transaction", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      vaultTransactionCreate/creator", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    vaultTransactionCreate/rentPayer", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("vaultTransactionCreate/systemProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                   transactionBuffer", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                             creator", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj VaultTransactionCreateFromBuffer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *VaultTransactionCreateFromBuffer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewVaultTransactionCreateFromBufferInstruction declares a new VaultTransactionCreateFromBuffer instruction with the provided parameters and accounts.
func NewVaultTransactionCreateFromBufferInstruction(
	// Parameters:
	args VaultTransactionCreateArgs,
	// Accounts:
	vaultTransactionCreateMultisig ag_solanago.PublicKey,
	vaultTransactionCreateTransaction ag_solanago.PublicKey,
	vaultTransactionCreateCreator ag_solanago.PublicKey,
	vaultTransactionCreateRentPayer ag_solanago.PublicKey,
	vaultTransactionCreateSystemProgram ag_solanago.PublicKey,
	transactionBuffer ag_solanago.PublicKey,
	creator ag_solanago.PublicKey) *VaultTransactionCreateFromBuffer {
	return NewVaultTransactionCreateFromBufferInstructionBuilder().
		SetArgs(args).
		SetVaultTransactionCreateAccountsFromBuilder(
			NewVaultTransactionCreateFromBufferVaultTransactionCreateAccountsBuilder().
				SetMultisigAccount(vaultTransactionCreateMultisig).
				SetTransactionAccount(vaultTransactionCreateTransaction).
				SetCreatorAccount(vaultTransactionCreateCreator).
				SetRentPayerAccount(vaultTransactionCreateRentPayer).
				SetSystemProgramAccount(vaultTransactionCreateSystemProgram),
		).
		SetTransactionBufferAccount(transactionBuffer).
		SetCreatorAccount(creator)
}
