// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_multisig_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Use a spending limit to transfer tokens from a multisig vault to a destination account.
type SpendingLimitUse struct {
	Args *SpendingLimitUseArgs

	// [0] = [] multisig
	// ··········· The multisig account the `spending_limit` is for.
	//
	// [1] = [SIGNER] member
	//
	// [2] = [WRITE] spendingLimit
	// ··········· The SpendingLimit account to use.
	//
	// [3] = [WRITE] vault
	// ··········· Multisig vault account to transfer tokens from.
	//
	// [4] = [WRITE] destination
	// ··········· Destination account to transfer tokens to.
	//
	// [5] = [] systemProgram
	// ··········· In case `spending_limit.mint` is SOL.
	//
	// [6] = [] mint
	// ··········· The mint of the tokens to transfer in case `spending_limit.mint` is an SPL token.
	//
	// [7] = [WRITE] vaultTokenAccount
	// ··········· Multisig vault token account to transfer tokens from in case `spending_limit.mint` is an SPL token.
	//
	// [8] = [WRITE] destinationTokenAccount
	// ··········· Destination token account in case `spending_limit.mint` is an SPL token.
	//
	// [9] = [] tokenProgram
	// ··········· In case `spending_limit.mint` is an SPL token.
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSpendingLimitUseInstructionBuilder creates a new `SpendingLimitUse` instruction builder.
func NewSpendingLimitUseInstructionBuilder() *SpendingLimitUse {
	nd := &SpendingLimitUse{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *SpendingLimitUse) SetArgs(args SpendingLimitUseArgs) *SpendingLimitUse {
	inst.Args = &args
	return inst
}

// SetMultisigAccount sets the "multisig" account.
// The multisig account the `spending_limit` is for.
func (inst *SpendingLimitUse) SetMultisigAccount(multisig ag_solanago.PublicKey) *SpendingLimitUse {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisig)
	return inst
}

// GetMultisigAccount gets the "multisig" account.
// The multisig account the `spending_limit` is for.
func (inst *SpendingLimitUse) GetMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMemberAccount sets the "member" account.
func (inst *SpendingLimitUse) SetMemberAccount(member ag_solanago.PublicKey) *SpendingLimitUse {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(member).SIGNER()
	return inst
}

// GetMemberAccount gets the "member" account.
func (inst *SpendingLimitUse) GetMemberAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSpendingLimitAccount sets the "spendingLimit" account.
// The SpendingLimit account to use.
func (inst *SpendingLimitUse) SetSpendingLimitAccount(spendingLimit ag_solanago.PublicKey) *SpendingLimitUse {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(spendingLimit).WRITE()
	return inst
}

// GetSpendingLimitAccount gets the "spendingLimit" account.
// The SpendingLimit account to use.
func (inst *SpendingLimitUse) GetSpendingLimitAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetVaultAccount sets the "vault" account.
// Multisig vault account to transfer tokens from.
func (inst *SpendingLimitUse) SetVaultAccount(vault ag_solanago.PublicKey) *SpendingLimitUse {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
// Multisig vault account to transfer tokens from.
func (inst *SpendingLimitUse) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDestinationAccount sets the "destination" account.
// Destination account to transfer tokens to.
func (inst *SpendingLimitUse) SetDestinationAccount(destination ag_solanago.PublicKey) *SpendingLimitUse {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(destination).WRITE()
	return inst
}

// GetDestinationAccount gets the "destination" account.
// Destination account to transfer tokens to.
func (inst *SpendingLimitUse) GetDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
// In case `spending_limit.mint` is SOL.
func (inst *SpendingLimitUse) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *SpendingLimitUse {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
// In case `spending_limit.mint` is SOL.
func (inst *SpendingLimitUse) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMintAccount sets the "mint" account.
// The mint of the tokens to transfer in case `spending_limit.mint` is an SPL token.
func (inst *SpendingLimitUse) SetMintAccount(mint ag_solanago.PublicKey) *SpendingLimitUse {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
// The mint of the tokens to transfer in case `spending_limit.mint` is an SPL token.
func (inst *SpendingLimitUse) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetVaultTokenAccountAccount sets the "vaultTokenAccount" account.
// Multisig vault token account to transfer tokens from in case `spending_limit.mint` is an SPL token.
func (inst *SpendingLimitUse) SetVaultTokenAccountAccount(vaultTokenAccount ag_solanago.PublicKey) *SpendingLimitUse {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(vaultTokenAccount).WRITE()
	return inst
}

// GetVaultTokenAccountAccount gets the "vaultTokenAccount" account.
// Multisig vault token account to transfer tokens from in case `spending_limit.mint` is an SPL token.
func (inst *SpendingLimitUse) GetVaultTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetDestinationTokenAccountAccount sets the "destinationTokenAccount" account.
// Destination token account in case `spending_limit.mint` is an SPL token.
func (inst *SpendingLimitUse) SetDestinationTokenAccountAccount(destinationTokenAccount ag_solanago.PublicKey) *SpendingLimitUse {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(destinationTokenAccount).WRITE()
	return inst
}

// GetDestinationTokenAccountAccount gets the "destinationTokenAccount" account.
// Destination token account in case `spending_limit.mint` is an SPL token.
func (inst *SpendingLimitUse) GetDestinationTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// In case `spending_limit.mint` is an SPL token.
func (inst *SpendingLimitUse) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SpendingLimitUse {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// In case `spending_limit.mint` is an SPL token.
func (inst *SpendingLimitUse) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst SpendingLimitUse) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SpendingLimitUse,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SpendingLimitUse) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SpendingLimitUse) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Multisig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Member is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SpendingLimit is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Destination is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.VaultTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.DestinationTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *SpendingLimitUse) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SpendingLimitUse")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        multisig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          member", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   spendingLimit", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           vault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     destination", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      vaultToken", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("destinationToken", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj SpendingLimitUse) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SpendingLimitUse) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewSpendingLimitUseInstruction declares a new SpendingLimitUse instruction with the provided parameters and accounts.
func NewSpendingLimitUseInstruction(
	// Parameters:
	args SpendingLimitUseArgs,
	// Accounts:
	multisig ag_solanago.PublicKey,
	member ag_solanago.PublicKey,
	spendingLimit ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	vaultTokenAccount ag_solanago.PublicKey,
	destinationTokenAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *SpendingLimitUse {
	return NewSpendingLimitUseInstructionBuilder().
		SetArgs(args).
		SetMultisigAccount(multisig).
		SetMemberAccount(member).
		SetSpendingLimitAccount(spendingLimit).
		SetVaultAccount(vault).
		SetDestinationAccount(destination).
		SetSystemProgramAccount(systemProgram).
		SetMintAccount(mint).
		SetVaultTokenAccountAccount(vaultTokenAccount).
		SetDestinationTokenAccountAccount(destinationTokenAccount).
		SetTokenProgramAccount(tokenProgram)
}
